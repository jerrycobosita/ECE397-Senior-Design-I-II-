#include <Servo.h>
#include <Wire.h>
#include <LiquidCrystal.h>
#include <Keypad.h>
#include <DS1307RTC.h>
#include <Stepper.h>
#define FORCE_SENSOR_PIN A0 // the FSR and 10K pulldown are connected to A0

const int stepsPerRevolution = 200;
const int pillRevolution = 50;
Stepper myStepper(stepsPerRevolution, 45, 47, 49, 51);

const byte ROWS = 4;
const byte COLS = 4;
char hexaKeys[ROWS][COLS] = {
  {'1', '2', '3', 'A'},
  {'4', '5', '6', 'B'},
  {'7', '8', '9', 'C'},
  {'*', '0', '#', 'D'}
};

byte rowPins[ROWS] = {9, 8, 7, 6};
byte colPins[COLS] = {5, 4, 3, 2};

Keypad customKeypad = Keypad( makeKeymap(hexaKeys), rowPins, colPins, ROWS, COLS);

const int rs = 22, en = 23, d4 = 24, d5 = 25, d6 = 26, d7 = 27;
LiquidCrystal lcd(rs, en, d4, d5, d6, d7);

const char *monthName[12] = {
  "Jan", "Feb", "Mar", "Apr", "May", "Jun",
  "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
};

tmElements_t tm;

String userAlarm = "";
String currTime = "";
char passCode[] = "1111";
char userInput[] = "0000";
int arrCounter = 0; //used to add user key input to array
int numErrors = 0;
int analogReading;
char Key;
int screen = 0;

void setup() {
  myStepper.setSpeed(10);
  /******************* SETTING TIME ***********************/
  lcd.begin(16, 2);
  lcd.setCursor(0, 0);
  bool parse=false;
  bool config=false;

  
  //get the date and time the compiler was ran
  if (getDate(__DATE__) && getTime(__TIME__)) {
    parse = true;
    //configure the RTC with this info
    if (RTC.write(tm)) {
      config = true;
    }
  }
  /********************************************************/
  Serial.begin(9600);
  welcome();
  delay(4000);
  promptPassCode();
}

void loop() {
    analogReading = analogRead(FORCE_SENSOR_PIN);
    if (analogReading < 10) {   //check if top lid was opened
      Serial.println(" -> no pressure, opened");
      lcd.print("!WARNING!");
      delay(1000);
      lcd.clear();
      reset();
      promptPassCode();
    }
   /*****************Keypad Handling************************/
    Key = customKeypad.getKey();
    if(Key == 'D') {
      lcd.clear();
      lcd.setCursor(0,0);
      lcd.print("Emergency Alert!");
      lcd.setCursor(0,1);
      lcd.print("Dispensing Pill!");
      delay(1000);
      turnStepper();
      screen == 0;
      lcd.clear();
    }
    
    if(screen == 2) { //idle time while tracking alarms
      Serial.println(analogReading);
      checkPressurePad();
      lcd.clear();
      lcd.setCursor(0,0);
      Key = customKeypad.getKey(); 
      readTime();
      if(currTime == userAlarm) { 
        turnStepper();
        lcd.clear();
        lcd.print("ALARM WENT OFF");
        userAlarm = ""; //reset user input after submitted
      }
      delay(1000);
    }
    
    if(Key) {
      lcd.print(Key);
      Serial.println(Key);
      if(screen == 0) { //checking passcode screen 
        checkCode(Key, tm.Hour, tm.Minute, tm.Second);
      }
      else if(screen == 1) { //accepting user alarms
        if(Key == '#') {
          Serial.println(userAlarm);
          screen = 2;
        }
        else { //display user input
          userAlarm += Key;       
        }
      }
      else {
        lcd.clear();
        lcd.print("Nothing");
      }
    }
   /********************************************************/
 }

void checkPressurePad() {
  analogReading = analogRead(FORCE_SENSOR_PIN);
  if (analogReading < 20) {   //check if top lid was opened
      lcd.clear();
      Serial.println(" -> no pressure, opened");
      lcd.print("!WARNING!");
      delay(1000);
      lcd.clear();
      reset();
      promptPassCode();
  }
}

void readTime() {
  checkPressurePad();
   if (RTC.read(tm)) {
    print2digits(tm.Hour);
    Serial.write(':');
    print2digits(tm.Minute);
    Serial.write(':');
    print2digits(tm.Second);
    
    printDigits(tm.Hour);
    lcd.write(':');
    printDigits(tm.Minute);
    lcd.write(':');
    printDigits(tm.Second);
    currTime = String(tm.Hour) + String(tm.Minute);
    Serial.println(currTime);
  }
}

void reset() {
  screen = 0;
  userAlarm = "";
  numErrors = 0;
}

void promptTimes() {
  lcd.begin(16,2);
  lcd.print("Enter alarms: ");
  lcd.setCursor(0,1);
}

void turnStepper() {
  myStepper.step(pillRevolution);
}

void checkCode(char Key, int Hour, int Minute, int Seconds) {
  if(Key == '#') { 
    arrCounter = 0;
    lcd.clear();
    if(strcmp(userInput, passCode) == 0) { 
      Serial.println("Correct");
      numErrors = 0;
      screen = 1;
      lcd.clear();
      promptTimes();
    } 
    else {
      lcd.clear();
      lcd.begin(16, 2);
      lcd.setCursor(0,0);
      lcd.print("Wrong, try again");
      lcd.setCursor(0,1);
      numErrors += 1;
      if(numErrors == 3) {
        int countDown = 10;
        while(countDown >= 0) {
          lcd.clear();
          lcd.setCursor(0,0);
          lcd.print("Locked out.");
          lcd.setCursor(0,1);
          lcd.print(countDown);
          countDown -= 1;
          numErrors = 0;
          delay(1000);
        }
        numErrors = 0;
        promptPassCode();
      }
      else {
        lcd.print("Attempts left: " + String(3 - numErrors));
        Serial.println("Wrong passcode, try again.");
      }
      delay(3000);
      promptPassCode(); 
    }
  }
  else {
    userInput[arrCounter] = Key;
    arrCounter += 1;
  }
}
  
void welcome() {
  lcd.clear();
  lcd.begin(16,2);
  lcd.print("Welcome!");
  lcd.setCursor(0,1);
  readTime();
}

void promptPassCode() {
  checkPressurePad();
  lcd.clear();
  lcd.begin(16,2);
  lcd.setCursor(0,0);
  lcd.write("Enter PW: ");
  lcd.setCursor(10,0);
}

int printDigits(int number) {
  if (number >= 0 && number < 10) {
    lcd.write('0');
  }
  lcd.print(number);
}

void print2digits(int number) {
  if (number >= 0 && number < 10) {
    Serial.write('0');
  }
  Serial.print(number);
}

bool getDate(const char *str) {
  char Month[12];
  int Day, Year;
  uint8_t monthIndex;

  if (sscanf(str, "%s %d %d", Month, &Day, &Year) != 3) return false;
  for (monthIndex = 0; monthIndex < 12; monthIndex++) {
    if (strcmp(Month, monthName[monthIndex]) == 0) break;
  }
  if (monthIndex >= 12) return false;
  tm.Day = Day;
  tm.Month = monthIndex + 1;
  tm.Year = CalendarYrToTm(Year);
  return true;
}

bool getTime(const char *str) {
  int Hour, Min, Sec;

  if (sscanf(str, "%d:%d:%d", &Hour, &Min, &Sec) != 3) return false;
  tm.Hour = Hour;
  tm.Minute = Min;
  tm.Second = Sec;
  return true;
}
